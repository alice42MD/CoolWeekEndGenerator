// import { useState, useEffect } from 'react';
// import './App.css';
// import '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';
// import {
//   MainContainer,
//   ChatContainer,
//   MessageList,
//   Message,
//   MessageInput,
//   TypingIndicator,
// } from '@chatscope/chat-ui-kit-react';

// const API_KEY = "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"

// const ChatGPT = () => {
//   const [messages, setMessages] = useState([
//     {
//       message: "Hello, I'm ChatGPT! Ask me anything!",
//       sentTime: "just now",
//       sender: "ChatGPT",
//     },
//   ]);
//   const [isTyping, setIsTyping] = useState(false);

//   const handleSendRequest = async (message: any) => {
//     const newMessage = {
//       message,
//       direction: 'outgoing',
//       sender: "user",
//       sentTime: "just now",
//     };

//     setMessages((prevMessages) => [...prevMessages, newMessage]);
//     setIsTyping(true);

//     try {
//       const response = await processMessageToChatGPT([...messages, newMessage]);
//       const content = response.choices[0]?.message?.content;
//       if (content) {
//         const chatGPTResponse = {
//           message: content,
//           sender: "ChatGPT",
//           sentTime: response.choices[0]?.sentTime
//         };
//         setMessages((prevMessages) => [...prevMessages, chatGPTResponse]);
//       }
//     } catch (error) {
//       console.error("Error processing message:", error);
//     } finally {
//       setIsTyping(false);
//     }
//   };

//   async function processMessageToChatGPT (chatMessages: any[]) {
//     const apiMessages = chatMessages.map((messageObject: { sender: string; message: any; }) => {
//       const role = messageObject.sender === "ChatGPT" ? "assistant" : "user";
//       return { role, content: messageObject.message };
//     });

//     const apiRequestBody = {
//       "model": "gpt-3.5-turbo",
//       "messages": [
//         { role: "system", content: "I'm a Student using ChatGPT for learning" },
//         ...apiMessages,
//       ],
//     };

//     const response = await fetch("https://api.openai.com/v1/chat/completions", {
//       method: "POST",
//       headers: {
//         "Authorization": "Bearer " + API_KEY,
//         "Content-Type": "application/json",
//       },
//       body: JSON.stringify(apiRequestBody),
//     });

//     return response.json();
//   }

//   return (
//     <div className="App">
//       <div style={{ position: "relative", height: "800px", width: "700px" }}>
//         <MainContainer>
//           <ChatContainer>
//             <MessageList
//               scrollBehavior="smooth"
//               typingIndicator={isTyping ? <TypingIndicator content="ChatGPT is typing" /> : null}
//             >
//               {messages.map((message, i) => {
//                 console.log(message)
//                 return <Message key={i} model={{ ...message, direction: 'incoming', position: 'normal' }} />
//               })}
//             </MessageList>
//             <MessageInput placeholder="Send a Message" onSend={handleSendRequest} />
//           </ChatContainer>
//         </MainContainer>
//       </div>
//     </div>
//   )
// }

// export default ChatGPT;

// src/Chat.js

import React, { useState } from "react"
import { OpenAIAPIKey } from "./config"

function Clear({ onClick }: { onClick: any }) {
  return <button onClick={onClick}>Clear</button>
}
function History({ question, onClick }: { question: any; onClick: any }) {
  return (
    <div onClick={onClick}>
      <p>{question.substring(0, 15)}...</p>
    </div>
  )
}
function Input({ value, onChange, onClick }: { value: any; onChange: any; onClick: any }) {
  return (
    <div>
      <input placeholder="Your prompt here..." value={value} onChange={onChange} />
      <button onClick={onClick}>Go</button>
    </div>
  )
}
function Message({ role, content }: { role: any; content: any }) {
  return (
    <div>
      <div>
        <img src={role === "assistant" ? "bot" : "user"} alt="profile avatar" />
      </div>
      <div>
        <p>{content}</p>
      </div>
    </div>
  )
}

const ChatGPT = () => {
  const [input, setInput] = useState("")
  const [messages, setMessages] = useState<any[]>([])
  const [history, setHistory] = useState<any[]>([])

  const handleSubmit = async () => {
    const prompt = {
      role: "user",
      content: input
    }

    setMessages([...messages, prompt])

    await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${OpenAIAPIKey}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        model: "gpt-3.5-turbo",
        messages: [...messages, prompt]
      })
    })
      .then(data => data.json())
      .then(data => {
        const res = data.choices[0].message.content
        setMessages(messages => [
          ...messages,
          {
            role: "assistant",
            content: res
          }
        ])
        setHistory(history => [...history, { question: input, answer: res }])
        setInput("")
      })
  }

  const clear = () => {
    setMessages([])
    setHistory([])
  }
  return (
    <div className="App">
      <div className="Column">
        <h3 className="Title">Chat Messages</h3>
        <div className="Content">
          {messages.map((el, i) => {
            return <Message key={i} role={el.role} content={el.content} />
          })}
        </div>
        <Input
          value={input}
          onChange={(e: { target: { value: React.SetStateAction<string> } }) => setInput(e.target.value)}
          onClick={input ? handleSubmit : undefined}
        />
      </div>
      <div className="Column">
        <h3 className="Title">History</h3>
        <div className="Content">
          {history.map((el, i) => {
            return (
              <History
                key={i}
                question={el.question}
                onClick={() =>
                  setMessages([
                    { role: "user", content: history[i].question },
                    { role: "assistant", content: history[i].answer }
                  ])
                }
              />
            )
          })}
        </div>
        <Clear onClick={clear} />
      </div>
    </div>
  )
}

export default ChatGPT
